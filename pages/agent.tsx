import Head from "next/head";
import { Anta, Inter, Trispace } from "next/font/google";
import { useEffect, useState } from "react";
import { useRouter } from "next/router";
import Navbar from "./components/navbar";
import styles from "./agent.module.css";
import { v4 as uuid } from "uuid";
import { getLogs, LogsSchemaType } from "../utils/db";
import { serializeToken } from "@/utils/auth";
import { useToken } from "@/hooks/useToken";

const antaFont = Anta({
  variable: "--font-anta",
  weight: ["400"],
  subsets: ["latin"],
});

const trispaceFont = Trispace({
  variable: "--font-trispace",
  weight: ["400"],
  subsets: ["latin"],
});

const interFont = Inter({
  variable: "--font-inter",
  subsets: ["latin"],
});

const Agent = () => {
  const router = useRouter();
  const { token, signToken } = useToken(true);
  const [currentPath, setCurrentPath] = useState<string>("");
  const [logs, setLogs] = useState<LogsSchemaType>([]);
  const walletAddress = "0x1234567890";
  const signature = "0x1234567890";

  useEffect(() => {
    const current = router.asPath.replace("/", "").toLocaleLowerCase();

    console.log(current);
    if (current === "") {
      setCurrentPath("about");
      return;
    }
    if (current === "agent") {
      setCurrentPath("agent");
      return;
    }
    if (current === "terminal") {
      setCurrentPath("terminal");
      return;
    }
  }, [router.pathname]);

  useEffect(() => {
    getLogs(walletAddress, signature).then((logs) => {
      setLogs(logs);
      console.log(logs);
    });
  }, [walletAddress, signature]);

  function formatTimestamp(timestamp: string) {
    const date = new Date(timestamp);

    // Extract components
    const day = String(date.getDate()).padStart(2, "0");
    const month = String(date.getMonth() + 1).padStart(2, "0"); // Months are 0-based
    const year = String(date.getFullYear()).slice(-2); // Get last 2 digits of the year
    const hours = String(date.getHours()).padStart(2, "0");
    const minutes = String(date.getMinutes()).padStart(2, "0");
    const seconds = String(date.getSeconds()).padStart(2, "0");

    // Format and return
    return {
      date: `${day}-${month}-${year}`,
      time: `${hours}:${minutes}:${seconds}`,
    };
  }

  async function getResponse(message: string) {
    if (!token) return; // TODO: throw error

    const { messages, error } = await fetch("/api/send-message", {
      method: "POST",
      headers: {
        "content-type": "application/json",
        authentication: "Bearer " + serializeToken(token),
      },
      body: JSON.stringify({ message }),
    }).then((r) => r.json());

    const newLogs = (messages ?? [error]).map((text: string) => ({
      timestamp: new Date().toISOString(),
      text,
    }));

    setLogs([...logs, ...newLogs]);
  }

  if (!token) {
    return <button onClick={signToken}>Sign In</button>;
  }

  return (
    <>
      <Head>
        <title>AIGG</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navbar />

      <div
        className={`${antaFont.variable} ${trispaceFont.variable} ${interFont.variable} ${styles.main}`}
      >
        <div className={styles.contentContainer}>
          <div className={styles.currPath}>{currentPath}</div>
          <div className={styles.agents}>
            {logs.map((eachLog) => {
              const { date, time } = formatTimestamp(eachLog.timestamp);

              return (
                <div key={uuid()} className={styles.agent}>
                  <div className={styles.agentTime}>
                    {date} {time}
                  </div>
                  <div className={styles.agentText}>{eachLog.text}</div>
                </div>
              );
            })}
          </div>

          <img src="/images/castle.png" alt="" className={styles.castle} />
        </div>
      </div>
      <button style={{ color: "white" }} onClick={() => getResponse("hello")}>
        Send test message
      </button>
    </>
  );
};

export default Agent;
